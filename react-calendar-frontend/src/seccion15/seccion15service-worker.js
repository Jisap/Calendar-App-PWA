/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

self.addEventListener('install', async( event ) => { // El serviceWorker estará a la escucha del evento install

  const cache = await caches.open('cache-1') // Promesa para abrir un espacio en el disco duro llamado 'cache-1'

  await cache.addAll([                                                                // En este cache añadiremos
    'https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css',       // el bootstrap
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0-2/css/all.min.css',   // y el font-awesome
    '/favicon.ico'
  ])

  const apiOfflineFallbacks = [
    'http://localhost:4000/api/auth/renew',
    'http://localhost:4000/api/events'
  ]

  self.addEventListener( 'fetch', ( event ) => {                       // El service-worker estará a la escucha del evento fetch
    
    console.log(event.request.url)

    if ( !apiOfflineFallbacks.includes( event.request.url) ){          // Si tratamos de entrar a una dirección diferente de login o events
      return                                                           // me salgo  
    }                                                                  // Solo dejaría entrar en la url especificada con la que vamos a trabajar  

    const resp = fetch( event.request )                                // Hacemos la petición a esa url del backend 
      .then( response => {                                             // Obtendriamos la respuesta y con ella
        caches.open('cache-dynamic')                                   // creariamos una entrada en cache llamada 'cache-dinamyc' 
          .then( cache => {                                            // donde pondriamos la req:url, res:response 
            cache.put( event.request, response )                       // De esta manera si no tuvieramos conexión siempre podriamos acceder a la última resp válida. 
          })
        return response.clone()                                        // Devolveriamos un clon de esa respuesta para poder ser usada más adelante
      })
      .catch( err => {                                                 // Si no obtuvieramos respuesta de la petición tendriamos un error 
        console.log('offline response')
        return caches.match( event.request )                           // Devolveriamos como respuesta la última válida guardada en cache 
      })

      event.respondWith( resp )                                       // La respuesta a la petición del login sería esa respuesta clonada 
  })

  // http:localhost:4000/api/events
})
